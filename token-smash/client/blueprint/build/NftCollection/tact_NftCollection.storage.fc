;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline {
    var (v'code, v'data) = v; 
    return (v'code, v'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: LogEventMintRecord
;; Header: 0xa3877d65
;; TLB: log_event_mint_record#a3877d65 minter:address item_id:int257 generate_number:int257 = LogEventMintRecord
;;

builder $LogEventMintRecord$_store(builder build_0, (slice, int, int) v) inline {
    var (v'minter, v'item_id, v'generate_number) = v;
    build_0 = store_uint(build_0, 2743565669, 32);
    build_0 = __tact_store_address(build_0, v'minter);
    build_0 = build_0.store_int(v'item_id, 257);
    build_0 = build_0.store_int(v'generate_number, 257);
    return build_0;
}

cell $LogEventMintRecord$_store_cell((slice, int, int) v) inline {
    return $LogEventMintRecord$_store(begin_cell(), v).end_cell();
}

((slice, int, int)) $LogEventMintRecord$_constructor_minter_item_id_generate_number(slice minter, int item_id, int generate_number) inline {
    return (minter, item_id, generate_number);
}

;;
;; Type: MarketItemCreated
;; Header: 0x5fc6f0fb
;; TLB: market_item_created#5fc6f0fb itemId:int257 nftAddress:address seller:address owner:address price:int257 isListed:bool = MarketItemCreated
;;

builder $MarketItemCreated$_store(builder build_0, (int, slice, slice, slice, int, int) v) inline_ref {
    var (v'itemId, v'nftAddress, v'seller, v'owner, v'price, v'isListed) = v;
    build_0 = store_uint(build_0, 1606873339, 32);
    build_0 = build_0.store_int(v'itemId, 257);
    build_0 = __tact_store_address(build_0, v'nftAddress);
    build_0 = __tact_store_address(build_0, v'seller);
    var build_1 = begin_cell();
    build_1 = __tact_store_address(build_1, v'owner);
    build_1 = build_1.store_int(v'price, 257);
    build_1 = build_1.store_int(v'isListed, 1);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $MarketItemCreated$_store_cell((int, slice, slice, slice, int, int) v) inline {
    return $MarketItemCreated$_store(begin_cell(), v).end_cell();
}

((int, slice, slice, slice, int, int)) $MarketItemCreated$_constructor_itemId_nftAddress_seller_owner_price_isListed(int itemId, slice nftAddress, slice seller, slice owner, int price, int isListed) inline {
    return (itemId, nftAddress, seller, owner, price, isListed);
}

;;
;; Type: GetRoyaltyParams
;; Header: 0x693d3950
;; TLB: get_royalty_params#693d3950 query_id:uint64 = GetRoyaltyParams
;;

(slice, ((int))) $GetRoyaltyParams$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1765620048);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: ReportRoyaltyParams
;; Header: 0xa8cb00ad
;; TLB: report_royalty_params#a8cb00ad query_id:uint64 numerator:uint16 denominator:uint16 destination:address = ReportRoyaltyParams
;;

builder $ReportRoyaltyParams$_store(builder build_0, (int, int, int, slice) v) inline {
    var (v'query_id, v'numerator, v'denominator, v'destination) = v;
    build_0 = store_uint(build_0, 2831876269, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'numerator, 16);
    build_0 = build_0.store_uint(v'denominator, 16);
    build_0 = __tact_store_address(build_0, v'destination);
    return build_0;
}

cell $ReportRoyaltyParams$_store_cell((int, int, int, slice) v) inline {
    return $ReportRoyaltyParams$_store(begin_cell(), v).end_cell();
}

((int, int, int, slice)) $ReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination(int query_id, int numerator, int denominator, slice destination) inline {
    return (query_id, numerator, denominator, destination);
}

;;
;; Type: CollectionData
;; TLB: _ next_item_index:int257 collection_content:^cell owner_address:address = CollectionData
;;

(int, cell, slice) $CollectionData$_to_external(((int, cell, slice)) v) inline {
    var (v'next_item_index, v'collection_content, v'owner_address) = v; 
    return (v'next_item_index, v'collection_content, v'owner_address);
}

((int, cell, slice)) $CollectionData$_constructor_next_item_index_collection_content_owner_address(int next_item_index, cell collection_content, slice owner_address) inline {
    return (next_item_index, collection_content, owner_address);
}

;;
;; Type: RoyaltyParams
;; TLB: _ numerator:int257 denominator:int257 destination:address = RoyaltyParams
;;

builder $RoyaltyParams$_store(builder build_0, (int, int, slice) v) inline {
    var (v'numerator, v'denominator, v'destination) = v;
    build_0 = build_0.store_int(v'numerator, 257);
    build_0 = build_0.store_int(v'denominator, 257);
    build_0 = __tact_store_address(build_0, v'destination);
    return build_0;
}

(slice, ((int, int, slice))) $RoyaltyParams$_load(slice sc_0) inline {
    var v'numerator = sc_0~load_int(257);
    var v'denominator = sc_0~load_int(257);
    var v'destination = sc_0~__tact_load_address();
    return (sc_0, (v'numerator, v'denominator, v'destination));
}

((int, int, slice)) $RoyaltyParams$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'numerator, int vvv'denominator, slice vvv'destination) = __tact_tuple_destroy_3(v);
    return (vvv'numerator, vvv'denominator, vvv'destination);
}

tuple $RoyaltyParams$_as_optional((int, int, slice) v) inline {
    var (v'numerator, v'denominator, v'destination) = v;
    return __tact_tuple_create_3(v'numerator, v'denominator, v'destination);
}

_ $RoyaltyParams$_get_numerator((int, int, slice) v) inline {
    var (v'numerator, v'denominator, v'destination) = v;
    return v'numerator;
}

_ $RoyaltyParams$_get_denominator((int, int, slice) v) inline {
    var (v'numerator, v'denominator, v'destination) = v;
    return v'denominator;
}

(int, int, slice) $RoyaltyParams$_to_external(((int, int, slice)) v) inline {
    var (v'numerator, v'denominator, v'destination) = v; 
    return (v'numerator, v'denominator, v'destination);
}

;;
;; Type: Transfer
;; Header: 0xecf3dcd9
;; TLB: transfer#ecf3dcd9 query_id:uint64 new_owner:address response_destination:Maybe address custom_payload:Maybe ^cell forward_amount:coins forward_payload:remainder<slice> = Transfer
;;

builder $Transfer$_store(builder build_0, (int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'new_owner, v'response_destination, v'custom_payload, v'forward_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 3975404761, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'new_owner);
    build_0 = __tact_store_address_opt(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $Transfer$_store_cell((int, slice, slice, cell, int, slice) v) inline {
    return $Transfer$_store(begin_cell(), v).end_cell();
}

((int, slice, slice, cell, int, slice)) $Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(int query_id, slice new_owner, slice response_destination, cell custom_payload, int forward_amount, slice forward_payload) inline {
    return (query_id, new_owner, response_destination, custom_payload, forward_amount, forward_payload);
}

;;
;; Type: MarketItem
;; TLB: _ index:int257 nftContract:address seller:address owner:address price:int257 isListed:bool sold:bool = MarketItem
;;

builder $MarketItem$_store(builder build_0, (int, slice, slice, slice, int, int, int) v) inline_ref {
    var (v'index, v'nftContract, v'seller, v'owner, v'price, v'isListed, v'sold) = v;
    build_0 = build_0.store_int(v'index, 257);
    build_0 = __tact_store_address(build_0, v'nftContract);
    build_0 = __tact_store_address(build_0, v'seller);
    var build_1 = begin_cell();
    build_1 = __tact_store_address(build_1, v'owner);
    build_1 = build_1.store_int(v'price, 257);
    build_1 = build_1.store_int(v'isListed, 1);
    build_1 = build_1.store_int(v'sold, 1);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $MarketItem$_store_cell((int, slice, slice, slice, int, int, int) v) inline {
    return $MarketItem$_store(begin_cell(), v).end_cell();
}

(slice, ((int, slice, slice, slice, int, int, int))) $MarketItem$_load(slice sc_0) inline_ref {
    var v'index = sc_0~load_int(257);
    var v'nftContract = sc_0~__tact_load_address();
    var v'seller = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'owner = sc_1~__tact_load_address();
    var v'price = sc_1~load_int(257);
    var v'isListed = sc_1~load_int(1);
    var v'sold = sc_1~load_int(1);
    return (sc_0, (v'index, v'nftContract, v'seller, v'owner, v'price, v'isListed, v'sold));
}

tuple $MarketItem$_as_optional((int, slice, slice, slice, int, int, int) v) inline {
    var (v'index, v'nftContract, v'seller, v'owner, v'price, v'isListed, v'sold) = v;
    return __tact_tuple_create_7(v'index, v'nftContract, v'seller, v'owner, v'price, v'isListed, v'sold);
}

tuple $MarketItem$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $MarketItem$_as_optional(sc~$MarketItem$_load());
}

((int, slice, slice, slice, int, int, int)) $MarketItem$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'index, slice vvv'nftContract, slice vvv'seller, slice vvv'owner, int vvv'price, int vvv'isListed, int vvv'sold) = __tact_tuple_destroy_7(v);
    return (vvv'index, vvv'nftContract, vvv'seller, vvv'owner, vvv'price, vvv'isListed, vvv'sold);
}

tuple $MarketItem$_to_tuple(((int, slice, slice, slice, int, int, int)) v) inline {
    var (v'index, v'nftContract, v'seller, v'owner, v'price, v'isListed, v'sold) = v;
    return __tact_tuple_create_7(v'index, v'nftContract, v'seller, v'owner, v'price, v'isListed, v'sold);
}

tuple $MarketItem$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $MarketItem$_to_tuple($MarketItem$_not_null(v)); 
}

tuple $MarketItem$_to_opt_external(tuple v) inline {
    var loaded = $MarketItem$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, slice, slice, slice, int, int, int)) $MarketItem$_constructor_index_nftContract_seller_owner_price_isListed_sold(int index, slice nftContract, slice seller, slice owner, int price, int isListed, int sold) inline {
    return (index, nftContract, seller, owner, price, isListed, sold);
}

;;
;; Type: Bought
;; Header: 0x5ce64898
;; TLB: bought#5ce64898 index:int257 nftAddress:address price:int257 seller:address buyer:address = Bought
;;

builder $Bought$_store(builder build_0, (int, slice, int, slice, slice) v) inline {
    var (v'index, v'nftAddress, v'price, v'seller, v'buyer) = v;
    build_0 = store_uint(build_0, 1558595736, 32);
    build_0 = build_0.store_int(v'index, 257);
    build_0 = __tact_store_address(build_0, v'nftAddress);
    build_0 = build_0.store_int(v'price, 257);
    var build_1 = begin_cell();
    build_1 = __tact_store_address(build_1, v'seller);
    build_1 = __tact_store_address(build_1, v'buyer);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $Bought$_store_cell((int, slice, int, slice, slice) v) inline {
    return $Bought$_store(begin_cell(), v).end_cell();
}

((int, slice, int, slice, slice)) $Bought$_constructor_index_nftAddress_price_seller_buyer(int index, slice nftAddress, int price, slice seller, slice buyer) inline {
    return (index, nftAddress, price, seller, buyer);
}

;;
;; Type: Buy
;; Header: 0x7d661634
;; TLB: buy#7d661634 query_id:uint64 nftId:int257 = Buy
;;

(slice, ((int, int))) $Buy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2103842356);
    var v'query_id = sc_0~load_uint(64);
    var v'nftId = sc_0~load_int(257);
    return (sc_0, (v'query_id, v'nftId));
}

;;
;; Type: ListOnSale
;; Header: 0x2e53659f
;; TLB: list_on_sale#2e53659f query_id:uint64 nftId:int257 nftAddress:address price:int257 = ListOnSale
;;

(slice, ((int, int, slice, int))) $ListOnSale$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 777217439);
    var v'query_id = sc_0~load_uint(64);
    var v'nftId = sc_0~load_int(257);
    var v'nftAddress = sc_0~__tact_load_address();
    var v'price = sc_0~load_int(257);
    return (sc_0, (v'query_id, v'nftId, v'nftAddress, v'price));
}

;;
;; Type: NftItem
;;

builder $NftItem$init$_store(builder build_0, (slice, int) v) inline {
    var (v'collection_address, v'item_index) = v;
    build_0 = __tact_store_address(build_0, v'collection_address);
    build_0 = build_0.store_int(v'item_index, 257);
    return build_0;
}

(cell, cell) $NftItem$_init_child(cell sys', slice $collection_address, int $item_index) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: NftItem
    cell mine = __tact_dict_get_code(source, 31210);
    contracts = __tact_dict_set_code(contracts, 31210, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $NftItem$init$_store(b, ($collection_address, $item_index));
    return (mine, b.end_cell());
}

;;
;; Type: NftCollection
;;

builder $NftCollection$_store(builder build_0, (int, slice, tuple, cell, cell, cell, cell, int, int) v) inline {
    var (v'next_item_index, v'owner_address, v'royalty_params, v'collection_content, v'sales, v'nftAddress, v'arr, v'arrLength, v'arrStart) = v;
    build_0 = build_0.store_uint(v'next_item_index, 32);
    build_0 = __tact_store_address(build_0, v'owner_address);
    var build_1 = begin_cell();
    build_1 = ~ null?(v'royalty_params) ? build_1.store_int(true, 1).$RoyaltyParams$_store($RoyaltyParams$_not_null(v'royalty_params)) : build_1.store_int(false, 1);
    build_1 = build_1.store_ref(v'collection_content);
    build_1 = build_1.store_dict(v'sales);
    build_1 = build_1.store_dict(v'nftAddress);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'arr);
    build_2 = build_2.store_uint(v'arrLength, 8);
    build_2 = build_2.store_uint(v'arrStart, 8);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, tuple, cell, cell, cell, cell, int, int))) $NftCollection$_load(slice sc_0) inline {
    var v'next_item_index = sc_0~load_uint(32);
    var v'owner_address = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'royalty_params = sc_1~load_int(1) ? $RoyaltyParams$_as_optional(sc_1~$RoyaltyParams$_load()) : null();
    var v'collection_content = sc_1~load_ref();
    var v'sales = sc_1~load_dict();
    var v'nftAddress = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'arr = sc_2~load_dict();
    var v'arrLength = sc_2~load_uint(8);
    var v'arrStart = sc_2~load_uint(8);
    return (sc_0, (v'next_item_index, v'owner_address, v'royalty_params, v'collection_content, v'sales, v'nftAddress, v'arr, v'arrLength, v'arrStart));
}

(slice, ((slice, cell, (int, int, slice)))) $NftCollection$init$_load(slice sc_0) inline {
    var v'owner_address = sc_0~__tact_load_address();
    var v'collection_content = sc_0~load_ref();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'royalty_params = sc_1~$RoyaltyParams$_load();
    return (sc_0, (v'owner_address, v'collection_content, v'royalty_params));
}

(int, slice, tuple, cell, cell, cell, cell, int, int) $NftCollection$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NftCollection$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner_address, cell collection_content, (int, int, slice) royalty_params) = $sc~$NftCollection$init$_load();
        $sc.end_parse();
        return $NftCollection$_contract_init(owner_address, collection_content, royalty_params);
    }
}

() $NftCollection$_contract_store((int, slice, tuple, cell, cell, cell, cell, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $NftCollection$_store(b, v);
    set_data(b.end_cell());
}