;;
;; Header files for NftCollection
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_crc16
(slice) __tact_crc16(slice data) inline_ref;

;; __tact_base64_encode
(slice) __tact_base64_encode(slice data) inline_ref;

;; __tact_address_to_userfriendly
(slice) __tact_address_to_userfriendly(slice address) inline_ref;

;; __tact_debug_address
() __tact_debug_address(slice address, slice debug_print) impure inline_ref;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_min_slice_int
(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl) inline;

;; __tact_dict_next_slice_int
(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $LogEventMintRecord$_store
builder $LogEventMintRecord$_store(builder build_0, (slice, int, int) v) inline;

;; $LogEventMintRecord$_store_cell
cell $LogEventMintRecord$_store_cell((slice, int, int) v) inline;

;; $MarketItemCreated$_store
builder $MarketItemCreated$_store(builder build_0, (int, slice, slice, slice, int, int) v) inline_ref;

;; $MarketItemCreated$_store_cell
cell $MarketItemCreated$_store_cell((int, slice, slice, slice, int, int) v) inline;

;; $GetRoyaltyParams$_load
(slice, ((int))) $GetRoyaltyParams$_load(slice sc_0) inline;

;; $ReportRoyaltyParams$_store
builder $ReportRoyaltyParams$_store(builder build_0, (int, int, int, slice) v) inline;

;; $ReportRoyaltyParams$_store_cell
cell $ReportRoyaltyParams$_store_cell((int, int, int, slice) v) inline;

;; $RoyaltyParams$_store
builder $RoyaltyParams$_store(builder build_0, (int, int, slice) v) inline;

;; $RoyaltyParams$_load
(slice, ((int, int, slice))) $RoyaltyParams$_load(slice sc_0) inline;

;; $Transfer$_store
builder $Transfer$_store(builder build_0, (int, slice, slice, cell, int, slice) v) inline_ref;

;; $Transfer$_store_cell
cell $Transfer$_store_cell((int, slice, slice, cell, int, slice) v) inline;

;; $MarketItem$_store
builder $MarketItem$_store(builder build_0, (int, slice, slice, slice, int, int, int) v) inline_ref;

;; $MarketItem$_store_cell
cell $MarketItem$_store_cell((int, slice, slice, slice, int, int, int) v) inline;

;; $MarketItem$_load
(slice, ((int, slice, slice, slice, int, int, int))) $MarketItem$_load(slice sc_0) inline_ref;

;; $MarketItem$_as_optional
tuple $MarketItem$_as_optional((int, slice, slice, slice, int, int, int) v) inline;

;; $MarketItem$_load_opt
tuple $MarketItem$_load_opt(cell cl) inline;

;; $Bought$_store
builder $Bought$_store(builder build_0, (int, slice, int, slice, slice) v) inline;

;; $Bought$_store_cell
cell $Bought$_store_cell((int, slice, int, slice, slice) v) inline;

;; $Buy$_load
(slice, ((int, int))) $Buy$_load(slice sc_0) inline;

;; $ListOnSale$_load
(slice, ((int, int, slice, int))) $ListOnSale$_load(slice sc_0) inline;

;; $RoyaltyParams$_not_null
((int, int, slice)) $RoyaltyParams$_not_null(tuple v) inline;

;; $NftCollection$_store
builder $NftCollection$_store(builder build_0, (int, slice, tuple, cell, cell, cell, cell, int, int) v) inline;

;; $RoyaltyParams$_as_optional
tuple $RoyaltyParams$_as_optional((int, int, slice) v) inline;

;; $NftCollection$_load
(slice, ((int, slice, tuple, cell, cell, cell, cell, int, int))) $NftCollection$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $CollectionData$_to_external
(int, cell, slice) $CollectionData$_to_external(((int, cell, slice)) v) inline;

;; $RoyaltyParams$_get_numerator
_ $RoyaltyParams$_get_numerator((int, int, slice) v) inline;

;; $RoyaltyParams$_get_denominator
_ $RoyaltyParams$_get_denominator((int, int, slice) v) inline;

;; $RoyaltyParams$_to_external
(int, int, slice) $RoyaltyParams$_to_external(((int, int, slice)) v) inline;

;; $MarketItem$_not_null
((int, slice, slice, slice, int, int, int)) $MarketItem$_not_null(tuple v) inline;

;; $MarketItem$_to_tuple
tuple $MarketItem$_to_tuple(((int, slice, slice, slice, int, int, int)) v) inline;

;; $MarketItem$_to_opt_tuple
tuple $MarketItem$_to_opt_tuple(tuple v) inline;

;; $MarketItem$_to_opt_external
tuple $MarketItem$_to_opt_external(tuple v) inline;

;; $NftItem$init$_store
builder $NftItem$init$_store(builder build_0, (slice, int) v) inline;

;; $NftCollection$init$_load
(slice, ((slice, cell, (int, int, slice)))) $NftCollection$init$_load(slice sc_0) inline;

;; $NftCollection$_contract_init
(int, slice, tuple, cell, cell, cell, cell, int, int) $NftCollection$_contract_init(slice $owner_address, cell $collection_content, (int, int, slice) $royalty_params) impure inline_ref;

;; $NftCollection$_contract_load
(int, slice, tuple, cell, cell, cell, cell, int, int) $NftCollection$_contract_load() impure inline_ref;

;; $NftCollection$_contract_store
() $NftCollection$_contract_store((int, slice, tuple, cell, cell, cell, cell, int, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $NftItem$_init_child
(cell, cell) $NftItem$_init_child(cell sys', slice $collection_address, int $item_index) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $MarketItem$_constructor_index_nftContract_seller_owner_price_isListed_sold
((int, slice, slice, slice, int, int, int)) $MarketItem$_constructor_index_nftContract_seller_owner_price_isListed_sold(int index, slice nftContract, slice seller, slice owner, int price, int isListed, int sold) inline;

;; $MarketItemCreated$_constructor_itemId_nftAddress_seller_owner_price_isListed
((int, slice, slice, slice, int, int)) $MarketItemCreated$_constructor_itemId_nftAddress_seller_owner_price_isListed(int itemId, slice nftAddress, slice seller, slice owner, int price, int isListed) inline;

;; $NftCollection$_fun_ListItems
((int, slice, tuple, cell, cell, cell, cell, int, int), ()) $NftCollection$_fun_ListItems((int, slice, tuple, cell, cell, cell, cell, int, int) $self, int $nftId, slice $nftAddress, int $price) impure inline_ref;

;; $NftCollection$_fun_arrPush
((int, slice, tuple, cell, cell, cell, cell, int, int), ()) $NftCollection$_fun_arrPush((int, slice, tuple, cell, cell, cell, cell, int, int) $self, slice $nftAddress, int $itemId) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice to, int value, int bounce, int mode, cell body, cell code, cell data) inline;

;; $Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload
((int, slice, slice, cell, int, slice)) $Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(int query_id, slice new_owner, slice response_destination, cell custom_payload, int forward_amount, slice forward_payload) inline;

;; $NftCollection$_fun_getNftItemInit
((int, slice, tuple, cell, cell, cell, cell, int, int), (cell, cell)) $NftCollection$_fun_getNftItemInit((int, slice, tuple, cell, cell, cell, cell, int, int) $self, int $item_index) impure inline_ref;

;; $NftCollection$_fun_mint
((int, slice, tuple, cell, cell, cell, cell, int, int), ()) $NftCollection$_fun_mint((int, slice, tuple, cell, cell, cell, cell, int, int) $self, slice $sender, int $msgValue) impure inline_ref;

;; $CollectionData$_constructor_next_item_index_collection_content_owner_address
((int, cell, slice)) $CollectionData$_constructor_next_item_index_collection_content_owner_address(int next_item_index, cell collection_content, slice owner_address) inline;

;; $NftCollection$_fun_get_collection_data
((int, slice, tuple, cell, cell, cell, cell, int, int), (int, cell, slice)) $NftCollection$_fun_get_collection_data((int, slice, tuple, cell, cell, cell, cell, int, int) $self) impure inline_ref;

;; $NftCollection$_fun_get_nft_address_by_index
((int, slice, tuple, cell, cell, cell, cell, int, int), slice) $NftCollection$_fun_get_nft_address_by_index((int, slice, tuple, cell, cell, cell, cell, int, int) $self, int $item_index) impure inline_ref;

;; $NftCollection$_fun_get_nft_address_using_maps
((int, slice, tuple, cell, cell, cell, cell, int, int), slice) $NftCollection$_fun_get_nft_address_using_maps((int, slice, tuple, cell, cell, cell, cell, int, int) $self, int $item_index) impure inline_ref;

;; $NftCollection$_fun_get_market_item
((int, slice, tuple, cell, cell, cell, cell, int, int), tuple) $NftCollection$_fun_get_market_item((int, slice, tuple, cell, cell, cell, cell, int, int) $self, int $item_index) impure inline_ref;

;; $NftCollection$_fun_get_nft_price
((int, slice, tuple, cell, cell, cell, cell, int, int), int) $NftCollection$_fun_get_nft_price((int, slice, tuple, cell, cell, cell, cell, int, int) $self, int $item_index) impure inline_ref;

;; $NftCollection$_fun_length
((int, slice, tuple, cell, cell, cell, cell, int, int), int) $NftCollection$_fun_length((int, slice, tuple, cell, cell, cell, cell, int, int) $self) impure inline_ref;

;; $NftCollection$_fun_map
((int, slice, tuple, cell, cell, cell, cell, int, int), cell) $NftCollection$_fun_map((int, slice, tuple, cell, cell, cell, cell, int, int) $self) impure inline_ref;

;; $NftCollection$_fun_keys
((int, slice, tuple, cell, cell, cell, cell, int, int), ()) $NftCollection$_fun_keys((int, slice, tuple, cell, cell, cell, cell, int, int) $self) impure inline_ref;

;; $NftCollection$_fun_get_nft_content
((int, slice, tuple, cell, cell, cell, cell, int, int), cell) $NftCollection$_fun_get_nft_content((int, slice, tuple, cell, cell, cell, cell, int, int) $self, int $index, cell $individual_content) impure inline_ref;

;; $NftCollection$_fun_royalty_params
((int, slice, tuple, cell, cell, cell, cell, int, int), (int, int, slice)) $NftCollection$_fun_royalty_params((int, slice, tuple, cell, cell, cell, cell, int, int) $self) impure inline_ref;

;; $NftCollection$_fun_forward
((int, slice, tuple, cell, cell, cell, cell, int, int), ()) $NftCollection$_fun_forward((int, slice, tuple, cell, cell, cell, cell, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $NftCollection$_fun_notify
((int, slice, tuple, cell, cell, cell, cell, int, int), ()) $NftCollection$_fun_notify((int, slice, tuple, cell, cell, cell, cell, int, int) $self, cell $body) impure inline;

;; $LogEventMintRecord$_constructor_minter_item_id_generate_number
((slice, int, int)) $LogEventMintRecord$_constructor_minter_item_id_generate_number(slice minter, int item_id, int generate_number) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $Bought$_constructor_index_nftAddress_price_seller_buyer
((int, slice, int, slice, slice)) $Bought$_constructor_index_nftAddress_price_seller_buyer(int index, slice nftAddress, int price, slice seller, slice buyer) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $ReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination
((int, int, int, slice)) $ReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination(int query_id, int numerator, int denominator, slice destination) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
