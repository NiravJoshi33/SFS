#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "counter_nftCollection.headers.fc";
#include "counter_nftCollection.stdlib.fc";
#include "counter_nftCollection.storage.fc";

;;
;; Contract nftCollection functions
;;

(slice, int, cell, cell) $nftCollection$_contract_init(cell $collection_content) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = (null(), 0, null(), null());
    $self'owner = __tact_context_get_sender();
    $self'collection_content = $collection_content;
    return ($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord);
}

((slice, int, cell, cell), (cell, cell)) $nftCollection$_fun_getNftItemInit((slice, int, cell, cell) $self, int $item_index, int $price) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = $self;
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), $NftItem$_init_child(__tact_context_sys, $self'owner, my_address(), $item_index, $price));
}

((slice, int, cell, cell), ()) $nftCollection$_fun_mint((slice, int, cell, cell) $self, slice $receiver, int $price) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = $self;
    throw_unless(62742, ($self'next_item_index >= 0));
    var ($nft_init'code, $nft_init'data) = ($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)~$nftCollection$_fun_getNftItemInit($self'next_item_index, $price);
    int $msgValue = $Context$_get_value(__tact_context_get());
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (30000000 - min($tonBalanceBeforeMsg, 30000000));
    $msgValue = ($msgValue - ($storageFee + 30000000));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($nft_init'code, $nft_init'data)), $msgValue, 2, false, $Transfer$_store_cell($Transfer$_constructor_query_id_new_owner(0, $receiver)), $nft_init'code, $nft_init'data));
    $self'itemRecord~__tact_dict_set_int_slice(257, $self'next_item_index, $global_contractAddress(($nft_init'code, $nft_init'data)));
    $self'next_item_index = ($self'next_item_index + 1);
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), ());
}

((slice, int, cell, cell), slice) $nftCollection$_fun_getItemAddress((slice, int, cell, cell) $self, int $item_index) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = $self;
    slice $item = __tact_not_null(__tact_dict_get_int_slice($self'itemRecord, 257, $item_index));
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), $item);
}

((slice, int, cell, cell), (int, cell, slice)) $nftCollection$_fun_gteCollectionData((slice, int, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = $self;
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), $CollectionData$_constructor_next_item_index_collection_content_owner_address($self'next_item_index, $self'collection_content, $self'owner));
}

((slice, int, cell, cell), int) $nftCollection$_fun_currentIndex((slice, int, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = $self;
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), $self'next_item_index);
}

((slice, int, cell, cell), ()) $nftCollection$_fun_requireOwner((slice, int, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), ());
}

((slice, int, cell, cell), slice) $nftCollection$_fun_owner((slice, int, cell, cell) $self) impure inline_ref {
    var (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)) = $self;
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), $self'owner);
}

;;
;; Receivers of a Contract nftCollection
;;

(((slice, int, cell, cell)), ()) $nftCollection$_internal_binary_Mint((slice, int, cell, cell) $self, (int, int) $msg) impure inline {
    var ($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord) = $self;
    var ($msg'query_id, $msg'price) = $msg;
    ($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)~$nftCollection$_fun_requireOwner();
    ($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)~$nftCollection$_fun_mint(__tact_context_get_sender(), $msg'price);
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), ());
}

(((slice, int, cell, cell)), ()) $nftCollection$_internal_binary_Deploy((slice, int, cell, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord)~$nftCollection$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'next_item_index, $self'collection_content, $self'itemRecord), ());
}

;;
;; Get methods of a Contract nftCollection
;;

_ %getNftItemInit(int $$item_index, int $$price) method_id(81078) {
    int $item_index = $$item_index;
    int $price = $$price;
    var self = $nftCollection$_contract_load();
    var res = self~$nftCollection$_fun_getNftItemInit($item_index, $price);
    return $StateInit$_to_external(res);
}

_ %getItemAddress(int $$item_index) method_id(65633) {
    int $item_index = $$item_index;
    var self = $nftCollection$_contract_load();
    var res = self~$nftCollection$_fun_getItemAddress($item_index);
    return res;
}

_ %gteCollectionData() method_id(127713) {
    var self = $nftCollection$_contract_load();
    var res = self~$nftCollection$_fun_gteCollectionData();
    return $CollectionData$_to_external(res);
}

_ %currentIndex() method_id(123274) {
    var self = $nftCollection$_contract_load();
    var res = self~$nftCollection$_fun_currentIndex();
    return res;
}

_ %owner() method_id(83229) {
    var self = $nftCollection$_contract_load();
    var res = self~$nftCollection$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmfAHbsBcVBEFS84Au3vZxU2ZjFCknE2bWC8PzyULyRcQK";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract nftCollection
;;

((slice, int, cell, cell), int) $nftCollection$_contract_router_internal((slice, int, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Mint message
    if (op == 687892413) {
        var msg = in_msg~$Mint$_load();
        self~$nftCollection$_internal_binary_Mint(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$nftCollection$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $nftCollection$_contract_load();
    
    ;; Handle operation
    int handled = self~$nftCollection$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $nftCollection$_contract_store(self);
}
